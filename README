C2-chessengine
--------------

This repository contains the code for a simple UCI chess-engine,
written in C++. I started on it long ago, and returned to it occasionally.
It doesn't play too well and it's kind of slow. It has been an interesting
task though.

It has beaten me a small number of times,
(My hess-rating was once 1970 in long games)

It requires another program to run it, a UCI-speaking chess GUI.
There are some of them easily downloded from the web, SCID or Jerry-chess GUI,
for instance. You can of course connect them to much better chess-engines
than this one, The free Stockfish is a good one. (comes with Ubuntu to install
with "sudo apt install stockfish".) The gui and the engine simply communicates
through stdin and stdout.

I've tried C2 mostly connected to Jerry on Ubuntu 20.04.
(Just configure a new analysis-engine in Jerry (or SCID or whatever chess-GUI
you choose) pointing out the executable C2 file.)
If the engine is started from a working directory where you have write-permissions,
it will log all commands and responses from/to the GUI in a file named command_log.txt
It plays, but I haven't implemented the analysis-commands yet.

There is also a rudimentary, to say the least, command-line interface. Which I
have used for testing some times. Just run the executable from the commandline,
with the "-cmd"-option. The input move syntax is simply e2e4 g1f3 etc but it accepts
for instance Ng1-f3 as well. Use a terminal with black text on a white background,
otherwise the white pieces will be black.
Starting from a position given in a .pgn-file requires you to copy the file 
ChooseFile.class into the GUI:s configurable working-directory from where it
starts C2, and to have java installed.)

Linux:
------
I normally compile it with gcc (g++) from within Eclipse on Ubuntu.
The only linkage-flag needed seems to be -lpthread.
And I use (among others) the dialect-compiler-flag -std=c++14, and
-o3 in a completely futile attempt to make it as fast as Fritz or Stockfish.
I have added a CMakeLists.txt in the src-directory a while ago,
so it should hopefully be possible to build it with cmake as well.

Windows:
--------
Actually, I made it build on windows 10 too with the help of
the Cmake file and I tried it with the free Visual studio Community
edition there. Unfortunately it runs even a bit slower on windows,
though I specified max optimization with the -O2 flag in CMakelist.txt.

The main routine is in C2.cpp.
The chess-logic is in Board.cpp. 

How does it work?:
------------------
To calculate the best move in a given position I use the
min/max-algorithm with pruning of the "search-tree". No AI.
There are some videos on youtube explaining how it works.
The pruning took me a while to understand.
(I've heard or read somewhere that it was ALan Turing who invented
this algorithm for playing games, such as chess, long before there
were any computers to do the job, and that he did it during a coffe
break. True or not, he was a smart guy.)

It searches default about 7 moves ahead, because of performance
issues, but this can be configured.
And when judging the positions in the final search-tree nodes it
has a reverance for materialistic concerns, however control of the
center squares, devolopment and casteling etc. also plays minor parts
in the judgement.
( There are some weights, one for each evaluation category, inside board.cpp
which can be tweaked up or down a little to change the evaluation of positions
and thereby also affect the behaviour of the program.)

If incremental_search is configured to true it will do an incremental searh for 
the best move, starting at level 2 and up to max_search_level. So it will have
a "best move" early to send back. If the GUI supplies a time-limit with the 
"go movetime <timelimit>"-command it will naturally stop when the timelimit has 
been reached and discard the last unfinished search.

If incremental_search is false it "thinks" until it's ready (on my rather old
lap-top computer, normally under 20 sekunds with search-level set to 7, faster
as the position gets more simple, naturally.) and ignores the time-limits it 
recieves together with the "go"-command from the GUI.

It always comes up with the same move in a given position and a given timelimit.
(No random beaviour or book moves yet). It cannot yet "ponder" when the opponent
 is thinking. It just waits for next input-command.

Zobrist hashing
---------------
Evaluated positions will be stored in a transposition table and retrieved during
the searh to speed it up. To generate "unique" hashtags for the positions I use
a Zobrits algorithm and the hash-element are stored ina C++ unsorted_map.
In each hash element I store {best_move, evaluation, searchlevel}.
A retrieved hash-element reference will not be used if it has a higher level
than the position which asked for it. (lower level means closer to the search-root
and should be a better evaluation. In this case the contents of the retrived 
hash-element reference will be overwritten when we have the new evaluation.
If the position asked for is not present in the cash we will also get a refernce
to a hash-element, but a new, default allocated one connected to the hashtag,
to fill with the new evaluation we make. So there is only one access to the
hash table. There's no need for an insert method.

What's wrong with it?:
------------------------
I update, and improve it once in a while when I feel for it. To make it really
fast will probably require serious redesign. I think it copies too much data and
claculates too much when traversing the "search-tree" going to a lower node.
(copying the current board position, making the move, calculating all possible moves
in the new position from scratch.) The board-representation is also way too clumsy
compared to bitboards.

You can stop reading here.

The rest of this file is just curiosa, some speculations about
improvements and a thought about the algorithm.
No more useful info abot how to build or use the program.

-----------------------------------------------------------------

Next step may be to implement sorting of the possible moves in a position
after search of a lower level, so the pruning will work more efficiently
in the search on next level. (idea stolen from stockfish).

The evaluation of material is done by scanning the board adding or
subtracting each piece-value. This could be done at the start and saved 
only in the initial board and then adjusted when a piece gets captured
or in the case of pawn-promotion. I measured the total time spent in
these evaluations for a whole search. It took some milliseconds, depressing.

 
I have thoughts about improving the evaluation of a position by making the
weights depend on the current move number or simply turning off some of
the evaluation categories after a couple of moves.
(counting development of pieces is hardly relevant in a rook and pawn
endgame. Center control and pawns in the center is mostly important in
the opening and the early middle game, once both Kings have castled
we don't have to check that anymore etc. Instead we could add other
categories which could "grow" in importance as the game proceeds and
consider passed pawns, isolated pawns, two bishops, pawn majorities
and others).

The problem with adding too much logic in the evaluation is that the 
evaluation itself takes time and evaluation happens once in all the 
"outermost leaves of the search tree". So, turning off is good but adding
more will come with a cost.

Another reflection one can make is that some of the "minor advantage
categories" such as bishops vs bishop and night, for instance, is
almost only relevant to look for in fairly equal (and open, I know)
positions. If there is a major difference in material we don't have to
spend time on checking the "bishops-category".

So, we can make some of the evaluations depend on the overall important
material count category.
 
It would also be fun to make C2 able to play against a version of itself, 
with just slightly differently tweaked evaluation weights. The winner could
then meet another C2 with a slightly, randomly, tweaked copy of the winner's
weights etc, in some kind of evolution process, which in time (a very long
time considering 20 seconds per move) could result in the optimal setting
of the weights, if the process converges towards a result at all.

Adding AI to select moves would be intresting, but I don't have a clear
picture of how to do it yet. NNUE seems interesting.

A thing about the Min/Max-algorithm I have thought about:
All evaluations are done in the leaves of the search-three and
almost always the reason to evalute is that we have reached the maximum
search level. But such evaluations are hard to do if e.g. the last move
was one where some piece was taken by another one. The min- or max-function
isn't allowed to look any further. So, they don't know if the piece can
be taken back or not. Suppose e.g.white would have stood much better after
recapturing the queen. Didn't the program miss an opportunity here, because
of min's forced "bad" evaluation, which in it's turn made max take the
"wrong" decission and discard the variation.

So, quite many of the evaluations will be completely wrong, because of
the "material count evaluation category". How can the chess-engine still
play decent chess?

I made an experiment to continue the search down the "search-tree", just and
only if the last move at max-level was a "take" or check, until we reached a node 
where the last move wasn't a take or a check, and at that point evaluate and
return. It worked for some seconds until we reached level 20 in some long
move-series with only checks and takes, so that doesn't seem to be a feasible
way to solve this problem. At least not for my slow chess-engine.
(I had only pre-allocated 20 boards, one for each search level so the program
crashed at level 21.) On the other hand, skipping checking for checks, there are
only 32 pieces to be taken, and two of them are Kings. So a move-series with only
takes can for sure never be longer than 30 moves. But U guess we would miss other
important moves then, some mean checks and checkmates maybe. Must check if
other chess-engines have solved this problem.





